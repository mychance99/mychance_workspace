C...................................................................... 
C.....SUBROUTINE VELCALC SOLVES THE 1-D TRANSIENT MOMENTUM EQUATION FOR
C.....SPREADING VELOCITIES ACROSS THE MESH USING AN APPROXIMATE 
C.....CONSERVATION OF MASS EQUATION.
C...................................................................... 
      SUBROUTINE VELCALC
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      COMMON/CATCHR/A(999),B(999),C(999),D(999),P(999),Q(999),
     1RECON(999),DELVEL(999),DSRDT(999),DELHTS(999),EMAX(999,999),
     2DBLKEN(999),DELHIT(16,999),SOURCE(16,999),SRCTOT(999),
     3HCROLD(16,999),DCDOT(999),HCRUST(16,999),DFILM(16,999),
     4DFMOLD(16,999),DENOLD(999),SIGOX(999),SIGCON(999),BET(999),
     5TFZX(999),TFZC(999),TKX(999),TKM(999),THETO(999,999),
     6THET1(999,999),OMEG0(4,999),OMEG1(4,999),TAO0(999),TAO1(999),
     7SIG0(999),SIG1(999),TARGB(999),DADOT(999),DADOTG(999),
     8XLOLD(4,999),VISREX(999),TATMS(999),HTMP(999),DHTMP(999),
     9HTMOLD(999)
      COMMON/CATCHI/NUMS(4,999),NUMOLD(4,999),NTRACK(16),NSUMP(999),
     1NPASSG(999),NCRSTM(999),NCRRT(999),NPASS(999),NBURN,NBURNO     
      COMMON/PRINTB/ELEVAT(999),ELOLD(999),XDIST(999,999),XBTW(999,999),
     1TEMP(999,999),ENTHP(999,999),EOLD(999,999),ENBLK(999),EBKOLD(999),
     2TBULK(999),HITE(16,999),HITOLD(16,999),HTOT(999),HTOLD(999),
     3HTCFT(999),HTCOEF(999),QFLUXT(999),QFLUXB(999),VEL(999),ELO(999),
     4VELOLD(999),SRSCOR(16),AREA(999),RAD(999),ARC(999),VOLCN(16),
     5VOID(999),VGJ(999),ZABLAT(999),ZABOLD(999),DCRUST(999),
     6DCROLD(999),DABCON(999),DABOLD(999),DFILMT(999),DFOLT(999),
     7SMFLX(4,999),XLSMF(4,999),TOTVOL,XFACMS(999),XMFLXA,XMCORT,
     8VCORT,TOTOX,TOTMET,QFLXT,QFLXB,TIME,DTIME,XMCOR(16),VCOR(16),
     9TCONI,RSAND,HDOWNC,TBOUND,EMISCN,PDRYWL,XDISTO(999),QOXT(999),
     1XLENSH,XBTWO(999),RCOMP,WDOOR,RSUMP,RSHELL,RPED,TPED,ELSMP,
     1TENDP(10,999),TFRZSH,TDEBRS,TKDEBR,PDEBR,CPDEBR,ENENDP(10,999),
     2ENOLDP(10,999),DXVERT,DXSNK,XDSTE(10,999),XBTE(10,999),HXLA(999),
     3HXLB(999),TSFEB(999),DCRS(999),DCRSLD(999),HCRS(16,999),
     4HCRSLD(16,999),THETE0(10,999),THETE1(10,999),QSHELL,QSHELE,TSHELI,
     5SIGOXE(999),FKOXE(999),RINJC,XLSEC,ANGSEC,ANINJC,XLCHAN,WCHNL,
     6TEFZX(999),TIMSPC(999),DXNODE(999),TNORM(999),FRCSOL(999),
     7ALPSPR(999),CRAMCON,HINTF,TSHLMX,XFRMX(999),XFROX(999),XFRTX(999),
     8XMLMX(999),XMLOX(999),XMLTX(999),XTOTX(999),TIMEO,TMAX,EDOWN(999),
     9HCP(999)
      COMMON/HCONS/HMETAL(999),HOXIDE(999)  
      COMMON/PROPI/ NMATC,NMATFI,NMATFF,ICAOH2,ICACO3,IMCCO3,IFH2O,     
     1IVH2O,ICK2O,IVK2O,INA2O,ITIO2,ISIO2,ICAO,IMGO,IAL2O3,IFEO,IFE2O3, 
     2IFE3O4,IFE,ICR,INI,IZR,IU,IB4C,IB,ICR2O3,INIO,IUO2,IZRO2,IB2O3,   
     3NBCINT(999),NODES(999),NUMNOD,IMOX(28),IBAS,ILCS,ILL,NACTIV(999),     
     4NBFRZM,NBFRZO,NABLFM,NDRNFM,NTYPMT(999,999),NDOOR,NBMADJ,NUMSHV,   
     5NBSHL(999),NCRSTS(999),NUMSHH,NSKIPE,NACSH,NWAT,NPEND,NBCBOT,
     6NCRTOP,NBFZOE,NBFZME,NGEOM,NL(999,999),NFRSCT,NLOGSH,NADAB,NINVIS,
     7NSIMST,NSTEEL,NOVHT,NOVTK,NOVUM,NOVEM,NOVSIG,NPLLOC(999),NBPL,
     8IXP(999),IYP(999),NVTPE,NSOLTP,NSOLF,NINTF,IFLGA(999),ICTYPE,ICTC,
     9NPOURS,NSMP,NPED,NDOR,NSHL,NANULS,NSMPCV,NBOIL,NSWALL,NMVER,
     1NCRTEM,NTHINC,NVELP,NITMAX,NENMAX,NPRINT,NPFREQ,NTIMSPC,NPLFREQ,
     2NPLTOT,NJET,NJETP,NJETD,NJETND,NODCAP,NVELPW,NITMAXW,NENMXW,
     3IFLGJ(999),NBEDCQ,ISHELE
      COMMON/PRINTR/ QFEH2O,QCRH2O,QZRH2O,QFECO2,QCRCO2,QZRCO2,
     4XFH2OU,XFCAOH,XFMGCA,XFCACO,XZRMRE,XFEMRE,XCRMRE,XZRORE,XFEORE,   
     5XCRORE,XMH2O,XMCO2,XMCACO,XMMGCA,XMCAOH,TFWL,TFWS,TBWL,TBWS,      
     6TMCAL,TMCAS,TCAL,TCAS,TFOS,TFOL,TFMS,TFML,XVISC(28),SVISC(28),    
     7XMOL(28),FMMOL(28),ROM(28),ROMLIQ(28),AEQM(28,2),BEQM(28,2),
     8CEQM(28,2),ECL,ECS,ECAL,ECAS,EMCAL,EMCAS,EBWL,EBWS,EFWL,EFWS,    
     9STEF,GRAV,PI,TCS,TCL,CCL,CCS,RMASSL,WPCC,WPM,WPA,WPCS,ROC,RMASSS,   
     1ANGSHL,RSLAGL,RSLAGS,HNODT,VFAV,VGAV,QXAV,XWTSS(16),  
     2TSCS(2),TSCL(2),ESCS(2),ESCL(2),CCSS(2),CCSL(2),ROSTLS,ROSTLL,
     3XFRGAS,HMINC,TST(99),TSTOP(99),AINTP(99),BINTP(99),DRATIO(999),
     4XBCN(999),XDCN(999),XBLT(15),ADEC(99),BDEC(99),APOUR(16,99),
     5BPOUR(16,99),XWTC(14),BWIDTH,THCKCV,TMBOIL,TEBOIL,VFINT,ANGFAN,
     6ALPMAX,THSHL,XFCABL,XNDMIN,DVMX,DAVMX,DEAVMX,DEMX,TDC,QDCU,QDCUO2,
     7TSINJ,EINJ,DTINJ,TKINJ,ROEV,CPINJ,SURFT,VSINJ,EMINJ,TSINJO,EINJO,
     8DTINJO,TKINJO,ROEVO,CPINJO,SURFTO,VSINJO,EMINJO,XLEADE,ARSUM,
     9DBUBOX,UTRISE,TREMSH,DJET,DFALL,WEBER,FROUDE,XPSAITO,XPEPSTN,
     1FRAG,XMBEDT,XMBED(16),XLPENT,XLPENA,UJET,UFALL,HFALL,ERPV,
     2TJETT(99),DJETT(99),HWATP,XDOTJET,DVMXW,DAVMXW,DEMXW,DEAVMXW,
     3QJETW,XSTMJF,TINTSJF,ESAT,DRDOOR,DRANL,EI,QDCBUO2,QDCBU,
     4EBEDS,EBEDB
      COMMON/PROPM/DTDEM(999),CPMLT(999),FKMLT(999),DENMLT(999),
     1SIGMLT(999),UMMLT(999),EMIMLT(999)      
      COMMON/PROPB/CPBM(999),FKB(999,999),DENB(999,999),DTDEB(999,999),
     1EMIBM(999),DENCRS(999),ENCRS(999),FKRF(999),DENRF(999),CPRF(999) 
C.....FIRST ZERO OUT PREVIOUS APROXIMATE HEIGHT AND VELOCITY INCREMENTS
C.....AND CALCULATE QUANTITIES BASED ON PREVIOUS TIMESTEP DATA.
      DO 1181 KN=1,NUMNOD
      DELVEL(KN)=0.D0
      DHTMP(KN)=0.D0
      DSRDT(KN)=0.D0  
      IF(SRCTOT(KN).LE.0.D0) GO TO 2618   
      DO 2615 KTP=1,16
      CALL INDEX(KTP,KJ)
      RVLE=ROMLIQ(KJ) 
      IF(KTP.EQ.16) RVLE=RSLAGL*ROC
      DSRDT(KN)=DSRDT(KN)+(SOURCE(KTP,KN)*AREA(KN))/RVLE
 2615 CONTINUE
 2618 CONTINUE
      IF(NACTIV(KN).EQ.0) GO TO 1184      
      IF(HTOT(KN).LE.0.D0) GO TO 1184      
      RECON(KN)=DENMLT(KN)/VISREX(KN)     
      GO TO 1181      
 1184 CONTINUE
      RECON(KN)=0.D0  
 1181 CONTINUE
C.....GIVEN PREVIOUS TIMESTEP DATA, CALCULATE NEW VELOCITIES...
      DTVEL=DTIME/FLOAT(NVELP)  
      DO 2231 KITV=1,NVELP      
      IF(KITV.EQ.1) GO TO 2232  
      DO 2233 KSV=1,NUMNOD      
      VELOLD(KSV)=VEL(KSV)      
      HTMOLD(KSV)=HTMP(KSV)     
 2233 CONTINUE
      VELOLD(NUMNOD+1)=VEL(NUMNOD+1)      
 2232 CONTINUE
      NITER=0
 2711 CONTINUE
      NITER=NITER+1   
      IF(NITER.GT.NITMAX) WRITE(2,*) 'WARNING: MELT VELOCITY CONV. FAILE
     1D, T=',TIME
      IF(NITER.GT.NITMAX) GO TO 2712      
C.....SOLVE FOR THE CELL BOUNDARY VELOCITIES.
      NUP=NUMNOD+1    
      DO 5001 K=1,NUP 
      IF(K.EQ.1) GO TO 6013     
      IF(K.EQ.NUP) GO TO 6013   
      GO TO 6014      
C.....BOUNDARY EDGE NODES ZEROED HERE.
 6013 CONTINUE
      A(K)=1.D0
      B(K)=0.D0
      C(K)=0.D0
      D(K)=0.D0
      GO TO 5001      
 6014 CONTINUE
C.....FIRST CHECK TO SEE IF THE NODE IS CAPPED IN HEIGHT, IF SO HAS IT
C.....FROZEN SHUT, AND IN THAT CASE ROUTE TO LOCATION WHERE VELOCITY 
C.....IS ZEROED AT CELL BOUNDARY. 
      IF(HCP(K-1)-ELEVAT(K-1).LE.0.D0) GO TO 5002
      IF(HCP(K)-ELEVAT(K).LE.0.D0) GO TO 5002
C.....FLOW OPENING EXISTS, SO PROCEED.
      HMJ=HMINC
      HMJM1=HMINC     
      HAJP1=0.D0      
      IF(K.LE.NUMNOD-1) HAJP1=HTMP(K+1)   
      HAJ=HTMP(K)     
      HAJM1=HTMP(K-1) 
      HAJM2=0.D0      
      IF(K.GT.2) HAJM2=HTMP(K-2)
      VJM32=VEL(K-1)  
      VJM12=VEL(K)    
      VJP12=VEL(K+1)  
      ACJM32=ARC(K-1) 
      ACJM12=ARC(K)   
      ACJP12=ARC(K+1) 
      SNJM32=1.D0     
      IF(VEL(K-1).LT.0.D0) SNJM32=-1.D0   
      SNJM12=1.D0     
      IF(VEL(K).LT.0.D0) SNJM12=-1.D0     
      SNJP12=1.D0     
      IF(VEL(K+1).LT.0.D0) SNJP12=-1.D0   
C.....EVALUATE FRICTION COEFFICIENT.      
      IF(HTOLD(K-1).GT.0.D0) GO TO 2693   
      FRFAC=0.D0      
      GO TO 2694      
 2693 CONTINUE
      HTFRC=HTOLD(K-1)
      IF(HTFRC.LT.HMINC) HTFRC=HMINC      
      DHJM1=(4.D0*HTMP(K-1))
      VELJM1=ABS(VEL(K))
      REJM1=DHJM1*VELJM1*RECON(K-1)
      CALL FRCCF(DHJM1,REJM1,RSAND,FRCJM1)
      FRFAC=(FRCJM1*(DXNODE(K)+DXNODE(K-1)))/HTFRC
 2694 CONTINUE
      W1=DSRDT(K)+ACJM12*HAJM1*DMAX1(VJM12,0.D0)+ACJP12*HAJP1*DMAX1(-VJP
     112,0.D0)-ACJM12*HAJ*DMAX1(-VJM12,0.D0)-ACJP12*HAJ*DMAX1(VJP12,0.D0
     2)     
      AAJ=(W1*DTVEL)/AREA(K)    
      W2=DSRDT(K-1)+ACJM32*HAJM2*DMAX1(VJM32,0.D0)+ACJM12*HAJ*DMAX1(-VJM
     112,0.D0)-ACJM32*HAJM1*DMAX1(-VJM32,0.D0)-ACJM12*HAJM1*DMAX1(VJM12,
     20.D0) 
      AAJM1=(W2*DTVEL)/AREA(K-1)
      HTGJ=HTMOLD(K)+AAJ
      HTJR=HTGJ-HMJ   
      HTJR=DMAX1(HTJR,0.D0)     
      HTGJM1=HTMOLD(K-1)+AAJM1  
      HTJM1R=HTGJM1-HMJM1
      HTJM1R=DMAX1(HTJM1R,0.D0) 
      IF(HTGJ.GT.0.D0.AND.HTGJM1.GT.0.D0) GO TO 8939
      IF(HTJM1R.LE.0.D0.AND.HTJR.LE.0.D0) GO TO 5002
 8939 CONTINUE
      HTVJM1=HTGJM1+ELEVAT(K-1)
      HTVJ=HTGJ+ELEVAT(K)
      DELHT=HTVJ-HTVJM1
C.....CHECK IF NODE IS A SUMP
      IF(NSUMP(K).EQ.1) GO TO 4525
      GO TO 5004      
 4525 CONTINUE
      HSMPCOMP=HTGJM1+ELEVAT(K-1)
      IF(HSMPCOMP.GT.ELEVAT(K)) GO TO 5004  
      IF(HTJR.LE.0.D0) GO TO 5002
      DELHT=HTJR
      GO TO 5004      
 5002 CONTINUE
      A(K)=1.D0
      B(K)=0.D0
      C(K)=0.D0
      D(K)=-VEL(K)    
      GO TO 5001      
 5004 CONTINUE
C.....CALCULATE TDMA ELEMENTS FOR CASES IN WHICH THERE IS FLOW ACROSS   
C.....THE CELL BOUNDARIES.      
      W3=HAJM1*DMAX1(SNJM12,0.D0)-HAJ*DMAX1(-SNJM12,0.D0)     
      BBJ=(DTVEL*ACJM12*W3)/AREA(K)
      W4=HAJM2*DMAX1(SNJM32,0.D0)-HAJM1*DMAX1(-SNJM32,0.D0)   
      BBJM1=(DTVEL*ACJM32*W4)/AREA(K-1)
      W5=HAJP1*DMAX1(-SNJP12,0.D0)-HAJ*DMAX1(SNJP12,0.D0)     
      GGJ=(DTVEL*ACJP12*W5)/AREA(K)
      W6=HAJ*DMAX1(-SNJM12,0.D0)-HAJM1*DMAX1(SNJM12,0.D0)     
      GGJM1=(DTVEL*ACJM12*W6)/AREA(K-1)
      DELRJ=DXNODE(K)+DXNODE(K-1)
      DELXA=DXNODE(K)+DXNODE(K-1)+SNJM12*(DXNODE(K)-DXNODE(K-1))
      ZWXJ=(DXNODE(K)*(1.D0+SNJM12))/(DELXA*DXNODE(K-1))      
      EWXJ=(DXNODE(K-1)*(1.D0-SNJM12))/(DELXA*DXNODE(K))      
C.....EVALUATE THE TDMA COEFFICIENTS.     
      A(K)=DELRJ/DTVEL+GRAV*(BBJ-GGJM1)+FRFAC*SNJM12*VJM12
     1+0.5D0*DELRJ*(ZWXJ*(2.D0*VJM12-VJM32)+EWXJ*(VJP12-2.D0*VJM12))    
      B(K)=-0.5D0*DELRJ*EWXJ*VJM12-GRAV*GGJ   
      C(K)=0.5D0*DELRJ*ZWXJ*VJM12+GRAV*BBJM1  
      X1=(DELRJ*(VJM12-VELOLD(K)))/DTVEL+0.5D0*DELRJ*VJM12*(ZWXJ*(VJM12 
     1-VJM32)+EWXJ*(VJP12-VJM12))
      X2=GRAV*DELHT+0.5D0*FRFAC*SNJM12*VJM12*VJM12      
      D(K)=-(X1+X2)   
 5001 CONTINUE
C.....SET UP AND SOLVE THE TDMA PROBLEM FOR THE VELOCITY INCREMENTS.    
      P(1)=B(1)/A(1)  
      Q(1)=D(1)/A(1)  
      DO 5010 KD=2,NUP
      P(KD)=B(KD)/(A(KD)-C(KD)*P(KD-1))   
      Q(KD)=(D(KD)+C(KD)*Q(KD-1))/(A(KD)-C(KD)*P(KD-1))
 5010 CONTINUE
      DELVEL(NUP)=Q(NUP)
      DO 5011 KD=1,NUMNOD
      NARG=NUP-KD     
      DELVEL(NARG)=P(NARG)*DELVEL(NARG+1)+Q(NARG)   
 5011 CONTINUE
C.....CALCULATE NEW VELOCITIES BASED ON VELOCITY INCREMENTS.  
      DO 5012 KD=1,NUP
      VEL(KD)=VEL(KD)+DELVEL(KD)
 5012 CONTINUE
C.....NOW CHECK MESH TO SEE IF THERE ARE ANY HEIGHT LIMITATIONS ON 
C.....THE DEBRIS AND ADJUST VELOCITIES TO ACCOUNT ACCORDINGLY.
      DO 3818 J=1,NUMNOD
      IF(HTMP(J)+ELEVAT(J).LE.HCP(J)) GO TO 3818
      IF(ELEVAT(J).LT.HCP(J)) GO TO 5113
      VEL(J)=0.D0
      VEL(J+1)=0.D0
      HTMP(J)=0.D0
      GO TO 3818
 5113 CONTINUE
      IF(VEL(J).LE.0.D0.AND.VEL(J+1).GE.0.D0) GO TO 3818
      IF(VEL(J).LT.0.D0.AND.VEL(J+1).LT.0.D0) GO TO 3819
      IF(VEL(J+1).LT.0.D0) GO TO 4821
C.....CASE 1 HERE: VJ>0 and VJ+1>0.
      QJ=0.D0 
      IF(J.GT.1) QJ=ARC(J)*HTMP(J-1)*VEL(J)
      QJP1=ARC(J+1)*HTMP(J)*VEL(J+1)
      IF(QJ.LE.QJP1) GO TO 3818 
      IF(J.EQ.1) GO TO 3820
      IF(HTMP(J-1).GE.HCP(J-1)-ELEVAT(J-1)) GO TO 3820
      VEL(J)=0.D0
      IF(HTMP(J-1).GT.0.D0) VEL(J)=QJP1/(HTMP(J-1)*ARC(J))
      GO TO 3818
 3820 CONTINUE
      VEL(J+1)=QJ/((HCP(J)-ELEVAT(J))*ARC(J+1))
      GO TO 3818
 3819 CONTINUE
C.....CASE 2 HERE: VJ<0 AND VJ+1<0.
      QJ=ARC(J)*DABS(VEL(J))*HTMP(J)
      QJP1=0.D0 
      IF(J.LT.NUMNOD) QJP1=ARC(J+1)*DABS(VEL(J+1))*HTMP(J+1)
      IF(QJ.GE.QJP1) GO TO 3818
      IF(J.EQ.NUMNOD) GO TO 4822
      IF(HTMP(J+1).GE.HCP(J+1)-ELEVAT(J+1)) GO TO 4822
      VEL(J+1)=0.D0
      IF(HTMP(J+1).GT.0.D0) VEL(J+1)=-QJ/(HTMP(J+1)*ARC(J+1))
      GO TO 3818
 4822 CONTINUE
      VEL(J)=-QJP1/((HCP(J)-ELEVAT(J))*ARC(J))
      GO TO 3818
 4821 CONTINUE
C.....CASE 3 HERE: VJ>0 and VJ+1<0.
      QJ=0.D0
      IF(J.GT.1) QJ=ARC(J)*VEL(J)*HTMP(J-1)
      QJP1=0.D0
      IF(J.LT.NUMNOD) QJP1=ARC(J+1)*DABS(VEL(J+1))*HTMP(J+1)
      IF(J.EQ.1) GO TO 3824
      IF(HTMP(J-1).LT.HCP(J-1)-ELEVAT(J-1)) 
     1 VEL(J)=-QJP1/((HCP(J)-ELEVAT(J))*ARC(J))
      GO TO 3818
 3824 CONTINUE
      IF(J.EQ.NUMNOD) GO TO 3818
      IF(HTMP(J+1).LT.HCP(J+1)-ELEVAT(J+1)) 
     1 VEL(J+1)=QJ/((HCP(J)-ELEVAT(J))*ARC(J+1))
 3818 CONTINUE 
C.....SOLVE SIMPLIFIED CONSERVATION OF MASS EQUATION TO OBTAIN THE      
C.....APROXIMATE HEIGHT DISTRIBUTION.     
      DO 2611 KND=1,NUMNOD      
      VJM12=VEL(KND)  
      VJP12=VEL(KND+1)
      IF(KND.EQ.1) GO TO 2612   
      IF(KND.EQ.NUMNOD) GO TO 2613
      HJM1=HTMP(KND-1)
      HJ=HTMP(KND)    
      HJP1=HTMP(KND+1)
      GO TO 2614      
 2612 CONTINUE
      HJM1=0.D0
      HJ=HTMP(KND)    
      HJP1=HTMP(KND+1)
      GO TO 2614      
 2613 CONTINUE
      HJM1=HTMP(KND-1)
      HJ=HTMP(KND)    
      HJP1=0.D0
 2614 CONTINUE
      D1=(AREA(KND)*(HJ-HTMOLD(KND)))/DTVEL
      D2=ARC(KND)*(HJ*DMAX1(-VJM12,0.D0)-HJM1*DMAX1(VJM12,0.D0))
      D3=ARC(KND+1)*(HJ*DMAX1(VJP12,0.D0)-HJP1*DMAX1(-VJP12,0.D0))      
      D4=DSRDT(KND)   
      D(KND)=-(D1+D2+D3-D4)     
      C(KND)=ARC(KND)*DMAX1(VJM12,0.D0)   
      B(KND)=ARC(KND+1)*DMAX1(-VJP12,0.D0)
      A(KND)=AREA(KND)/DTVEL+ARC(KND)*DMAX1(-VJM12,0.D0)+ARC(KND+1)*DMAX
     11(VJP12,0.D0)   
 2611 CONTINUE
C.....FIND APPROXIMATE HEIGHT INCREMENTS. 
      P(1)=B(1)/A(1)  
      Q(1)=D(1)/A(1)  
      DO 2616 KTOP=2,NUMNOD     
      DENOM=A(KTOP)-C(KTOP)*P(KTOP-1)     
      P(KTOP)=B(KTOP)/DENOM     
      Q(KTOP)=(D(KTOP)+C(KTOP)*Q(KTOP-1))/DENOM     
 2616 CONTINUE
C.....DO BACKWARDS SUBSTITUTION 
      DHTMP(NUMNOD)=Q(NUMNOD)   
      DO 2617 KLP=1,NUMNOD-1    
      IARG=NUMNOD-KLP 
      DHTMP(IARG)=P(IARG)*DHTMP(IARG+1)+Q(IARG)     
 2617 CONTINUE
C.....FIND ITERATED HEIGHTS.    
      DO 2818 KND=1,NUMNOD      
      HTMP(KND)=HTMP(KND)+DHTMP(KND)      
      HTMP(KND)=DMAX1(HTMP(KND),0.D0)     
 2818 CONTINUE
C.....CONDUCT AT LEAST ONE ITERATION BEFORE CHECKING ON 
C.....CONVERGENCE.
      IF(NITER.EQ.1) GO TO 2711 
      DVMAX=ABS(DELVEL(1))      
      DVSUM=DVMAX     
      DO 3283 KN=2,NUMNOD+1     
C.....PERFORM AT LEAST FIVE ITERATIONS BEFORE CHECKING TO SEE IF 
C.....CONVERGANCE IS LIMITED BY FREEZING AT THE LEADING EDGE.
      IF(NITER.LE.5) GO TO 8332
      IF(HTMP(KN).LE.HMINC) GO TO 3283
 8332 CONTINUE
      DABV=ABS(DELVEL(KN))      
      DVSUM=DVSUM+DABV
      DVMAX=DMAX1(DABV,DVMAX)   
 3283 CONTINUE
      DVAV=DVSUM/FLOAT(NUMNOD+1)
      IF(DVMAX.LE.DVMX.AND.DVAV.LE.DAVMX) GO TO 2712
      GO TO 2711      
 2712 CONTINUE
 2231 CONTINUE
C.....RE-ESTABLISH MELT PROPERTIES IF MELT IS NOW OVER PREVIOUSLY 
C.....FROZEN DEBRIS.  FIRST FIND A NODE THAT IS A RECEPTOR IF THERE
C.....IS A MELT POUR.
      JSEND=1
      IF(NGEOM.EQ.1) GO TO 4533
      DO 4534 I=1,NUMNOD
      IF(IFLGA(I).EQ.1) JSEND=I
 4534 CONTINUE
 4533 CONTINUE
      DO 1033 KN=1,NUMNOD
      IF(NACTIV(KN).EQ.0) GO TO 1033      
      IF(HTOT(KN).GT.0.D0) GO TO 1033     
      IF(HTMP(KN).LE.0.D0) GO TO 1033     
      IF(SRCTOT(KN).LE.0.D0) GO TO 1034   
      TBULK(KN)=TSINJ 
      ENBLK(KN)=EINJ  
      EBKOLD(KN)=EINJ 
      DTDEM(KN)=DTINJ 
      FKMLT(KN)=TKINJ 
      DENMLT(KN)=ROEV 
      CPMLT(KN)=CPINJ 
      SIGMLT(KN)=SURFT
      UMMLT(KN)=VSINJ 
      VISREX(KN)=VSINJ
      EMIMLT(KN)=EMINJ
      GO TO 1033      
 1034 CONTINUE
      NLOC=KN-1
      IF(KN.EQ.1) NLOC=KN+1     
      IF(KN.LE.JSEND) NLOC=KN+1
      TBULK(KN)=TBULK(NLOC)     
      ENBLK(KN)=ENBLK(NLOC)     
      EBKOLD(KN)=ENBLK(KN)      
      DTDEM(KN)=DTDEM(NLOC)     
      FKMLT(KN)=FKMLT(NLOC)     
      DENMLT(KN)=DENMLT(NLOC)   
      CPMLT(KN)=CPMLT(NLOC)     
      SIGMLT(KN)=SIGMLT(NLOC)   
      UMMLT(KN)=UMMLT(NLOC)     
      VISREX(KN)=UMMLT(NLOC)
      EMIMLT(KN)=EMIMLT(NLOC)   
 1033 CONTINUE
      RETURN
      END